package com.jizhi.jlongg.main.activity.log;import android.animation.ValueAnimator;import android.app.Activity;import android.content.Context;import android.text.Editable;import android.text.InputFilter;import android.text.InputType;import android.text.TextUtils;import android.text.TextWatcher;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.view.animation.DecelerateInterpolator;import android.widget.EditText;import android.widget.TextView;import com.google.gson.Gson;import com.hcs.uclient.utils.LUtils;import com.jizhi.jlongg.R;import com.jizhi.jlongg.main.activity.SignAddressChangeActivity;import com.jizhi.jlongg.main.bean.GroupDiscussionInfo;import com.jizhi.jlongg.main.bean.LogModeBean;import com.jizhi.jlongg.main.util.DecimalInputFilter;import java.util.HashMap;import java.util.List;/** * CName:新发日志适配器 * User: hcs * Date: 2017-07-21 * Time: 16:29 */public class MessageNewLogAdapter extends LogBaseAdapter {    private List<LogModeBean> data;    private Context context;    private LayoutInflater mInflater;    protected boolean isClose;    /*群组信息 */    protected GroupDiscussionInfo gnInfo;    private TimeClickListener timeClickListener;    int index = -1;    HashMap<Integer, String> saveMap;//这个集合用来存储对应位置上Editext中的文本内容    /*是否是修改日期 */    private boolean isUpdateLog;    public MessageNewLogAdapter(Context context, List<LogModeBean> data, TimeClickListener timeClickListener) {        this.context = context;        mInflater = LayoutInflater.from(context);        this.data = data;        this.timeClickListener = timeClickListener;        saveMap = new HashMap<Integer, String>();    }    public boolean isUpdateLog() {        return isUpdateLog;    }    public void setUpdateLog(boolean updateLog) {        isUpdateLog = updateLog;    }    public void notifyDataSetChanged(List<LogModeBean> data) {        this.data = data;        notifyDataSetChanged();    }    public void setClose(boolean close) {        isClose = close;    }    //获取ListView的项个数    public int getCount() {        return data.size();    }    //获取项    public Object getItem(int position) {        return data.get(position);    }    //获取项的ID    public long getItemId(int position) {        return position;    }    @Override    public int getViewTypeCount() {        return 9;    }    // 每个convert view都会调用此方法，获得当前所需要的view样式    @Override    public int getItemViewType(int position) {        LogModeBean entity = data.get(position);        switch (entity.getElement_type_number()) {            case LogBaseAdapter.TYPE_TEXT:                return LogBaseAdapter.TYPE_TEXT;            case LogBaseAdapter.TYPE_TEXTAREA:                return LogBaseAdapter.TYPE_TEXTAREA;            case LogBaseAdapter.TYPE_NUMBER:                return LogBaseAdapter.TYPE_NUMBER;            case LogBaseAdapter.TYPE_SELECT:                return LogBaseAdapter.TYPE_SELECT;            case LogBaseAdapter.TYPE_DATE:                return LogBaseAdapter.TYPE_DATE;            case LogBaseAdapter.TYPE_DATEFRAME:                return LogBaseAdapter.TYPE_DATEFRAME;            case LogBaseAdapter.TYPE_WEATHER:                return LogBaseAdapter.TYPE_WEATHER;            case LogBaseAdapter.TYPE_LOGDATE:                return LogBaseAdapter.TYPE_LOGDATE;            case LogBaseAdapter.TYPE_LOGLOC:                return LogBaseAdapter.TYPE_LOGLOC;            default:                return 0;        }    }    //获取View    public View getView(final int position, View convertView, ViewGroup parent) {        final LogModeBean entity = data.get(position);        TextHolder holder = null;        int type = getItemViewType(position);        if (convertView == null) {            switch (type) {                case LogBaseAdapter.TYPE_WEATHER://天气                    convertView = mInflater.inflate(R.layout.item_log_weather, null);                    holder = findWeatherView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_TEXT:                    //文字单行                    convertView = mInflater.inflate(R.layout.item_log_text_single_line, null);                    holder = findTextView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_TEXTAREA:                    //文字多行                    convertView = mInflater.inflate(R.layout.item_log_text_more_line, null);                    holder = findTextView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_NUMBER:                    // 数字单行                    convertView = mInflater.inflate(R.layout.item_log_text_single_number, null);                    holder = findTextNumberView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_SELECT:                    //选择                    convertView = mInflater.inflate(R.layout.item_log_select, null);                    holder = findSelectView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_DATE:                case LogBaseAdapter.TYPE_LOGDATE:                    //时间单个                    convertView = mInflater.inflate(R.layout.item_log_select, null);                    holder = findSelectTimeView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_DATEFRAME:                    //时间两个                    convertView = mInflater.inflate(R.layout.item_log_select_time, null);                    holder = findSelectTimeSView(convertView);                    convertView.setTag(holder);                    break;                case LogBaseAdapter.TYPE_LOGLOC:                    //所在位置                    convertView = mInflater.inflate(R.layout.item_log_text_location, null);                    holder = findLocView(convertView);                    convertView.setTag(holder);                    break;            }        } else {            switch (type) {                case LogBaseAdapter.TYPE_WEATHER:                case LogBaseAdapter.TYPE_TEXT:                case LogBaseAdapter.TYPE_TEXTAREA:                case LogBaseAdapter.TYPE_NUMBER:                case LogBaseAdapter.TYPE_SELECT:                case LogBaseAdapter.TYPE_DATE:                case LogBaseAdapter.TYPE_LOGDATE:                case LogBaseAdapter.TYPE_DATEFRAME:                case LogBaseAdapter.TYPE_LOGLOC:                    holder = (TextHolder) convertView.getTag();                    break;            }        }//        switch (entity.getElement_type_number()) {            case LogBaseAdapter.TYPE_WEATHER://天气                LUtils.e(new Gson().toJson("-----AAAA--555--------"+new Gson().toJson(entity.getWeather_info())));                if (null != entity.getWeather_info()) {                    //上午天气                    if (null != entity.getWeather_info().getWeat_am()) {                        holder.tv_weather_morning.setText(entity.getWeather_info().getWeat_am());                    }                    //下午天气                    if (null != entity.getWeather_info().getWeat_pm()) {                        holder.tv_weather_afternoon.setText(entity.getWeather_info().getWeat_pm());                    }                    //上午风力                    if (null != entity.getWeather_info().getWind_am()) {                        holder.ed_wind_morning.setText(entity.getWeather_info().getWind_am());                    }                    //下午风力                    if (null != entity.getWeather_info().getWind_pm()) {                        holder.ed_wind_afternoon.setText(entity.getWeather_info().getWind_pm());                    }                    //上午温度                    if (null != entity.getWeather_info().getTemp_am()) {                        holder.ed_temperature_morning.setText(entity.getWeather_info().getTemp_am());                    }                    //下午温度                    if (null != entity.getWeather_info().getTemp_pm()) {                        holder.ed_temperature_afternoon.setText(entity.getWeather_info().getTemp_pm());                    }                }                setTextOnClick(holder.rea_weather_morning, position, holder.tv_weather_morning.getId());                setTextOnClick(holder.rea_weather_afternoon, position, holder.tv_weather_afternoon.getId());                setEditTextChange(holder.ed_wind_morning, position, true, "wind_am");                setEditTextChange(holder.ed_wind_afternoon, position, true, "wind_pm");                setEditTextChange(holder.ed_temperature_morning, position, true, "temp_am");                setEditTextChange(holder.ed_temperature_afternoon, position, true, "temp_pm");                setFocusEdit(holder.ed_wind_morning, position);                setFocusEdit(holder.ed_wind_afternoon, position);                setFocusEdit(holder.ed_temperature_afternoon, position);                setFocusEdit(holder.ed_temperature_morning, position);                if(null!=entity.getWeather_info()&&entity.getWeather_info().isShowWear_amAnim()){                    holder.view_cursor_morning.setVisibility(View.VISIBLE);                    holder.view_cursor_morning.setAnimation(getAlphaAnimationIn());                }else{                    holder.view_cursor_morning.setVisibility(View.GONE);                    holder.view_cursor_morning.setAnimation(null);                }                if(null!=entity.getWeather_info()&&entity.getWeather_info().isShowWear_pmAnim()){                    holder.view_cursor_adaternoon.setVisibility(View.VISIBLE);                    holder.view_cursor_adaternoon.setAnimation(getAlphaAnimationIn());                }else{                    holder.view_cursor_adaternoon.setVisibility(View.GONE);                    holder.view_cursor_adaternoon.setAnimation(null);                }                break;            case LogBaseAdapter.TYPE_TEXT: //文字单行                holder.tv_name.setText(entity.getElement_name());                holder.ed_text.setHint("请输入" + entity.getElement_name());                setEditTextChange(holder.ed_text, position, false, null);                setFocusEdit(holder.ed_text, position);                setEditTextLength(holder.ed_text, entity.getLength_range());                holder.ed_text.setText(entity.getElement_value());//                holder.ed_text.setText(saveMap.get(position));//                holder.ed_text.setSelection(holder.ed_text.getText().length());                break;            case LogBaseAdapter.TYPE_TEXTAREA: //文字多行                holder.tv_name.setText(entity.getElement_name());                holder.ed_text.setHint("请输入" + entity.getElement_name());                setEditTextChange(holder.ed_text, position, false, null);                setFocusEdit(holder.ed_text, position);                setEditTextLength(holder.ed_text, entity.getLength_range());                holder.ed_text.setText(entity.getElement_value());//                holder.ed_text.setText(saveMap.get(position));//                holder.ed_text.setSelection(holder.ed_text.getText().length());                break;            case LogBaseAdapter.TYPE_NUMBER:  // 数字单行                holder.tv_name.setText(entity.getElement_name());                holder.ed_text.setHint("请输入" + entity.getElement_name());                holder.tv_company.setText(entity.getElement_unit());                holder.ed_text.setText(entity.getElement_value());                setEditTextChange(holder.ed_text, position, false, null);                if (null != holder.ed_text) {                    setFocusEdit(holder.ed_text, position);                }                setEditTextDecimalNumberLength(holder.ed_text, entity.getDecimal_place());                break;            case LogBaseAdapter.TYPE_SELECT: //选择                holder.tv_name.setText(entity.getElement_name());                if (!TextUtils.isEmpty(entity.getElement_value())) {                    holder.tv_text.setText(entity.getElement_value());                } else {                    holder.tv_text.setHint("请选择" + entity.getElement_name());                }                convertView.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ReleaseLogSelectorActivity.actionStart((Activity) context, "请选择" + entity.getElement_name(), entity.getSelect_value_list(), position);                    }                });                break;            case LogBaseAdapter.TYPE_DATE://时间单个                holder.tv_name.setText(entity.getElement_name());                holder.tv_text.setHint("请选择" + entity.getElement_name());                //设置第一个时间值                if (!TextUtils.isEmpty(entity.getElement_value())) {                    holder.tv_text.setText(entity.getElement_value());                }                holder.rea_time_single.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        timeClickListener.singleTimeClick(position);                    }                });                break;            case LogBaseAdapter.TYPE_LOGDATE://时间单个                holder.tv_name.setText("日期");//                holder.tv_text.setHint("请选择发布时间");                //设置第一个时间值                if (!TextUtils.isEmpty(entity.getElement_value())) {                    holder.tv_text.setText(entity.getElement_value());                }                holder.rea_time_single.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        timeClickListener.sendTimeClick(position);                    }                });                break;            case LogBaseAdapter.TYPE_DATEFRAME://时间两个                if (null != entity.getList() && entity.getList().size() == 2) {                    holder.tv_time_start.setText(entity.getList().get(0).getElement_name());                    holder.tv_text_start.setHint("请选择" + entity.getList().get(0).getElement_name());                    holder.tv_time_end.setText(entity.getList().get(1).getElement_name());                    holder.tv_text_end.setHint("请选择" + entity.getList().get(1).getElement_name());                    //设置第一个时间值                    if (!TextUtils.isEmpty(entity.getList().get(0).getElement_value())) {                        holder.tv_text_start.setText(entity.getList().get(0).getElement_value());                    }                    //设置第二个时间值                    if (!TextUtils.isEmpty(entity.getList().get(1).getElement_value())) {                        holder.tv_text_end.setText(entity.getList().get(1).getElement_value());                    }                    holder.rea_time_start.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            timeClickListener.startTimeClick(position, 0);                        }                    });                    holder.rea_time_end.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            timeClickListener.endTimeClick(position, 1);                        }                    });                }                break;            case LogBaseAdapter.TYPE_LOGLOC://所在位置                holder.tv_text.setText(entity.getElement_value());                if (isUpdateLog) {                    holder.img_select_loc.setVisibility(View.GONE);                    holder.rea_reset_location.setVisibility(View.GONE);                } else {                    holder.img_select_loc.setVisibility(View.VISIBLE);                    holder.rea_reset_location.setVisibility(View.GONE);                    holder.rea_location_change.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            SignAddressChangeActivity.actionStart((Activity) context, "");                        }                    });                    holder.rea_reset_location.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            if (!TextUtils.isEmpty(entity.getElement_value())) {                                timeClickListener.location();                            }                        }                    });                }                break;        }        return convertView;    }    /**     * 透明效果     *     * @return     */    public Animation getAlphaAnimationIn() {        //实例化 AlphaAnimation 主要是改变透明度        //透明度 从 1-不透明 0-完全透明        Animation animation = new AlphaAnimation(1.0f, 0.0f);        //设置动画插值器 被用来修饰动画效果,定义动画的变化率        animation.setInterpolator(new DecelerateInterpolator());        animation.setRepeatCount(ValueAnimator.INFINITE);        //设置动画执行时间        animation.setDuration(1000);        return animation;    }    /**     * 解决liview中edittext弹出键盘焦点失去问题     *     * @param editText     * @param position     */    public void setFocusEdit(EditText editText, final int position) {        editText.setTag(position);        editText.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_UP) {                    // 在TOUCH的UP事件中，要保存当前的行下标，因为弹出软键盘后，整个画面会被重画                    // 在getView方法的最后，要根据index和当前的行下标手动为EditText设置焦点                    index = position;                }                return false;            }        });        editText.clearFocus();        // 如果当前的行下标和点击事件中保存的index一致，手动为EditText设置焦点。        if (index != -1 && index == position) {            editText.requestFocus();        }        // 焦点移到最后        editText.setSelection(editText.getText().length());    }    /**     * 设置edittext最大长度     *     * @param editText     * @param length_range     */    public void setEditTextLength(EditText editText, String length_range) {        if (!TextUtils.isEmpty(length_range) && length_range.length() > 1 && length_range.contains(",")) {            String[] strings = length_range.split(",");            if (strings.length == 2) {                editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(Integer.parseInt(strings[1]))});            } else {                editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(1000)});            }        } else {            editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(1000)});        }    }    /**     * 设置edittext小数位数     *     * @param editText     * @param decimal_place     */    public void setEditTextDecimalNumberLength(EditText editText, int decimal_place) {        if (0 != decimal_place) {            editText.setFilters(new InputFilter[]{new DecimalInputFilter(20, decimal_place)});            editText.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);        } else {            editText.setInputType(InputType.TYPE_CLASS_NUMBER);        }    }    public void setEditTextChange(final EditText editText, final int position, final boolean isWeather, final String weatherType) {        editText.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                Integer tag = (Integer) editText.getTag();                saveMap.put(tag, s.toString());//在这里根据position去保存文本内容                timeClickListener.setEditText(position, saveMap.get(position), isWeather, weatherType);            }        });    }    public void setTextOnClick(View textView, final int position, final int id) {//        textView.setOnClickListener(new View.OnClickListener() {//            @Override//            public void onClick(View v) {//                timeClickListener.setWeatherClick(position, id);//            }//        });        textView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                switch (v.getId()) {                    case R.id.rea_weather_morning:                        timeClickListener.setWeatherClick(position, id);                        break;                    case R.id.rea_weather_afternoon:                        timeClickListener.setWeatherClick(position, id);                        break;                }            }        });//        textView.setOnTouchListener(new View.OnTouchListener() {//            @Override//            public boolean onTouch(View v, MotionEvent event) {////                switch (event.getAction()) {//                    case MotionEvent.ACTION_UP://                        LUtils.e("-----ACTION_UP------------:");//                        timeClickListener.setWeatherClick(position, id);//                        break;//                }//                        event.getAction()//                textView.setOnClickListener();//                return false;//            }//        });    }    public interface TimeClickListener {        /**         * 开始时间         */        public void startTimeClick(int position, int childposition);        /**         * 结束时间         */        public void endTimeClick(int position, int childposition);        /**         * 时间单选         */        public void singleTimeClick(int position);        /**         * 发布时间         */        public void sendTimeClick(int position);        /**         * 文本, 天气输入框         */        public void setEditText(int position, String str, boolean isWeather, String weatherType);        /**         * 天气选择框         */        public void setWeatherClick(int position, int id);        /**         * 重新定位         */        public void location();    }}